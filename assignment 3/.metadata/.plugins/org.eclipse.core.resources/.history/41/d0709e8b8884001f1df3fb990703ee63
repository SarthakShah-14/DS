/*
 * 6.c
 *
 *  Created on: 07-Oct-2024
 *      Author: root
 */
#include<stdio.h>

struct node
{
	int rno;
	char name[10];
	int sem;
	int sub1;
	int sub2;
	int sub3;
	int total;

	struct node *next;
}*first=NULL,*last=NULL,*curr=NULL,*tmp=NULL;

int isempty()
{
	return first==NULL;
}

void insertfirst()
{
    tmp=(struct node*)malloc(sizeof(struct node));
	printf("enter data:");
    scanf("%d",&tmp->rno);
    scanf("%s",tmp->name);
    scanf("%d",&tmp->sem);
    scanf("%d",&tmp->sub1);
    scanf("%d",&tmp->sub2);
    scanf("%d",&tmp->sub3);
    tmp->total=tmp->sub1+tmp->sub2+tmp->sub3;
	tmp->next=first;
	if(isempty())
	{
		first =last=tmp;
	}
	else
	{
		first=tmp;
	}
}
void insertlast()
{
	tmp=(struct node*)malloc(sizeof (struct node));
	printf("enter data:");
	 scanf("%d",&tmp->rno);
	scanf("%s",tmp->name);
	scanf("%d",&tmp->sem);
	scanf("%d",&tmp->sub1);
	scanf("%d",&tmp->sub2);
	scanf("%d",&tmp->sub3);
	tmp->total=tmp->sub1+tmp->sub2+tmp->sub3;
	tmp->next=NULL;
	if(isempty())
	{
		first=last=tmp;
	}
	else
	{
		last->next=tmp;
		last=tmp;
	}

}
void insertafter()
{
	if(isempty())
	{
		printf("\n linked list is empty");
		return;
	}
	else
	{
		int index,cnt=1;
		printf("enter index after when you want to add:");
		scanf("%d",&index);

		curr=first;
		while(curr->next!=NULL && cnt<index)
		{
			curr=curr->next;
			cnt++;
		}
		if(cnt==index)
		{
			tmp=(struct node*)malloc(sizeof (struct node));
			printf("enter data:");
		   scanf("%d",&tmp->rno);
			scanf("%s",&tmp->name);
			scanf("%d",&tmp->sem);
			scanf("%d",&tmp->sub1);
			scanf("%d",&tmp->sub2);
			scanf("%d",&tmp->sub3);
			tmp->total=tmp->sub1+tmp->sub2+tmp->sub3;
			tmp->next=curr->next;
			curr->next=tmp;
		if(curr==last)
		{
			last=tmp;
		}
		printf("\n %d  roll no is successfully inserted after %d index.",curr->rno,index);
		}
		else
		{
			printf("index is not found\n");
		}
	}
 return;
}
void traversal()
{
	if(isempty())
	{
		printf("\n linked list is empty");
		return;
	}
	else
	{
		curr=first;
		while(curr!=NULL)
		{
			printf("\t%d\t%s\t%d\t%d\t%d\t%d\t%d",curr->rno,curr->name,curr->sem,curr->sub1,curr->sub2,curr->sub3,curr->total);
			curr=curr->next;
		}
	}
}
int main()
{
	int choice;
	do{

	printf("\n*** Linked list menu***");
	printf("\n 1.insert first");
	printf("\n 2.insert last");
	printf("\n 3.insert after");
	 printf("\n 4.delete first");
	printf("\n 5.delete last");
	printf("\n 6.delete particular");
	printf("\n 7.traversal");

	printf("\n 8.exit");

	printf("\n enter your choice:");
	scanf("%d",&choice);

	switch(choice)
	{
		   case 1:
		insertfirst();
		break;

		case 2:
		insertlast();
		break;

		case 3:
		insertafter();
		break;

		case 4:
		deletefirst();
		break;

		case 5:
		deletelast();
		break;

		case 6:
		deleteparticular();
		break;

		case 7:
		traversal();
		break;

		case 8:
		return 0;

		default:
		printf("\n invalid choice");
		break;
	}
	}
	while(choice!=11);
	return 0;
}








